# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1juonlijkyGp5RXLjIO6fTdlfKavZN5Nv
"""

"""
Impor library pandas untuk memvisualisasikan tabel pada check_order
"""
import pandas as pd

"""
Sebuah kelas untuk menjalankan kasir self-service di supermarket.
"""
class Transaction:
  """
  Fungsi untuk inisiasi keranjang belanja
  """
  def __init__(self):
    self.data_belanjaan = dict()
    """
    Fungsi untuk mengisi keranjang belanja

    parameter :
    nama   : str   nama items
    jumlah : int   jumlah items
    harga  : int   harga per items
    """
  def add_item(self, nama, jumlah, harga):
    try:
      self.data_belanjaan.update({nama: [jumlah, harga, jumlah * harga]})
    except ValueError:
      print("Input tidak benar!")

    """
    Fungsi untuk mengganti nama item, apabila
    sebelumnya ada kesalahan dalam memasukkan nama item

    paramaters:
    nama      : str nama items yang ingin diganti
    nama_baru : str nama items baru yang sesuai
    """
  def update_item_name(self, nama, nama_baru):
    try:
      temp = self.data_belanjaan[nama] # membuat variabel sederhana
      self.data_belanjaan.pop(nama)
      self.data_belanjaan.update({nama_baru: temp})
    except KeyError:
      print("Nama item yang dimasukkan tidak sesuai!")
    """
    Fungsi untuk mengubah jumlah dari suatu item belanjaan

    parameter :
    nama        : str nama items yang ingin diupdate jumlahnya
    jumlah_baru : int masukkan jumlah yang diinginkan
    """
  def update_item_qty(self, nama, jumlah_baru):
    self.data_belanjaan[nama][0] = jumlah_baru
    self.data_belanjaan[nama][2] = jumlah_baru * self.data_belanjaan[nama][1]

    """
    Fungsi untuk mengubah harga dari suatu item belanjaan

    parameter:
    nama       : str nama items yang ingin diupdate harganya
    harga_baru : int masukkan nominal harga yang diinginkan
    """
  def update_item_price(self, nama, harga_baru):
    self.data_belanjaan[nama][1] = harga_baru
    self.data_belanjaan[nama][2] = harga_baru * self.data_belanjaan[nama][0]

  """
  Fungsi untuk menghapus salah satu item belanjaan

  parameter :
  nama    : str nama items yang ingin dihapus dari daftar belanjaan
  """
  def delete_item(self,nama):
    self.nama = nama
    if nama == nama:
      self.data_belanjaan.pop(nama)

  """
  Fungsi untuk menghapus seluruh data belanjaan
  """
  def reset_transaction(self):
    self.data_belanjaan.clear()
    print("Semua item berhasil di delete!")

  """
  Fungsi untuk mengecek daftar barang belanjaan yang sudah
  diinput, memastikan bahwa semuanya sudah sesuai
  """
  def check_order(self):
    if(len(self.data_belanjaan) == 0):
        print("Terdapat Kesalahan Input Data!")
    else:
        all_data_title = self.data_belanjaan.keys()
        for title in all_data_title:
          """
          Cek title yang sudah ditrim agar tidak ada item yang bernama kosong
          """
          trimmed_title = title.strip()
          if(len(trimmed_title) == 0):
            print("Data belanjaan tidak valid (harap cek Item dengan Title: \""+ title + "\")\n")

        data = pd.DataFrame(self.data_belanjaan).T
        data.columns = [ "Jumlah item", "Harga per item", "Total Harga"]
        data["Total Harga"] = data["Jumlah item"] * data["Harga per item"]
        print(data.to_markdown() + "\n")

  """
  Fungsi untuk menghitung harga total dari belanjaan yang sudah diinput

  Ada potongan diskon dengan ketentuan:
  a. Jika total harga per item Andi diatas Rp 200.000 maka akan mendapatkan diskon 5%
  b. Jika total harga per item Andi diatas Rp 300.000 maka akan mendapatkan diskon 6%
  c. Jika total harga per item Andi diatas Rp 500.000 maka akan mendapatkan diskon 7%

  """
  def total_price(self):
    total = 0
    for i in self.data_belanjaan.values():
      total += i[2]

    if total > 500000:
      total *= 0.93
    elif total > 300000:
      total *= 0.94
    elif total > 200000:
      total *= 0.95

    return f"Total belanja yang harus dibayarkan adalah Rp. {format(total, ',')}"